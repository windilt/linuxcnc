component limit3 "Limit the output signal to fall between min and max, limit its slew rate to less than maxv per second, and limit its second derivative to less than maxa per second squared.  When the signal is a position, this means that the position, velocity, and acceleration are limited.";
pin in float in;
pin out float out;
pin out bit in_limit "TRUE if in limit, FALSE if \\fBout\\fR is exactly tracking \\fBin\\fR";
pin in bit load "When TRUE, immediately set \\fBout\\fB to \\fBin\\fR, ignoring maxv and maxa";
pin in float min_=-1e20;
pin in float max_=1e20;
pin in float maxv=1e20;
pin in float maxa=1e20;

// Note: trailing '_' char  needed for name handling on some of the
//       following per-instance items with halcompile due to
//       naming clashes in simple_tp.h
variable double in_pin;
variable double min_pos_pin;
variable double max_pos_pin;
variable double maxv_pin;
variable double maxa_pin;
variable double out_pin;
variable double curr_vel_;
variable double in_pos_old_;
variable double out_vel_old_;
variable double in_pos_lim;
variable int    active_;
variable int    disallow_backoff_;
variable int    in_limit_pin;

function _;
license "GPL";
;;

#include "rtapi_math.h"
#include "simple_tp.h"
#include "simple_tp_code.h"

FUNCTION(_) {
    struct limit3_parms parms;
    struct limit3_parms *p = &parms;

    in_pin        = in;
    out_pin       = out;
    min_pos_pin   = min_;
    max_pos_pin   = max_;
    maxv_pin      = maxv;
    maxa_pin      = maxa;
    in_limit_pin  = in_limit;

    // limit3_planner parameters:
    p->L3_pos_cmd           = &in_pin;
    p->L3_min_pos           = &min_pos_pin;
    p->L3_max_pos           = &max_pos_pin;
    p->L3_max_vel           = &maxv_pin;
    p->L3_max_acc           = &maxa_pin;
    p->L3_curr_pos          = &out_pin;
    p->L3_curr_vel          = &curr_vel_;
    p->L3_in_pos_old        = &in_pos_old_;
    p->L3_out_vel_old       = &out_vel_old_;

    // special usage:
    p->L3_disallow_backoff  = &disallow_backoff_;
    *p->L3_disallow_backoff = 0;  // default limit3 usage

    // results:
    p->L3_active           = &active_;
    p->L3_in_limit         = &in_limit_pin;

    if (load) {
	// Apply first order limit
	in_pos_lim = fmin(max_, fmax(min_, in));
	SET_NEXT_STATE(p, in_pos_lim, 0, in_pos_lim);
	return;
    }

    limit3_planner(p,fperiod);
    out_pin      = out      = *p->L3_curr_pos;
    in_limit_pin = in_limit = *p->L3_in_limit;
}
